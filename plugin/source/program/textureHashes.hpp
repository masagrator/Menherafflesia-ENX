#include <stdexcept>

struct hashTable {
	uint64_t hash;
	const char filepath[18];
};

template <typename T> constexpr uint64_t has_duplicates(const T *array, std::size_t size)
{
	for (std::size_t i = 1; i < size; i++)
		for (std::size_t j = 0; j < i; j++)
			if (array[i].hash == array[j].hash) {
				return array[i].hash;
			}
	return 0;
}

constexpr hashTable TEXTURE_HASHES[] = {
	{0x827E241B7DE962B0lu, "bg/00168"},
	{0xDB9306A1E4CD0672lu, "bg/00171"},
	{0x458B655AA2A20FC0lu, "bg/00172"},
	{0xF0006F6E786C7184lu, "bg/00173"},
	{0xA211D7858379F87Blu, "bg/00174"},
	{0x0472BE86C5487232lu, "bg/00175"},
	{0x5EE35161033ED7B8lu, "sys/00002/ID00003"},
	{0x7A7653F192D3FE4Alu, "sys/00002/ID00004"},
	{0x129DDA86D7EC018Blu, "bg/00317"},
	{0x7D0992C3BD6ADD65lu, "bg/00345"},
	{0xAC744DAE80524DDDlu, "bg/00347"},
	{0x992B3E237FEDC44Dlu, "sys/00000/ID00017"},
	{0xFFFDED66A23B4764lu, "sys/00000/ID00024"},
	{0x13FF63C921FCDEAClu, "sys/00000/ID00025"},
	{0xB0D42EC2131AF8AFlu, "sys/00000/ID00026"},
	{0xDC67B2F1591F0739lu, "sys/00000/ID00047"},
	{0x7F349A518953244Alu, "sys/00002/ID00003"},
	{0x4F479C11C4E8CBDDlu, "sys/00002/ID00004"},
	{0x76094F03EA05066Alu, "bg/00345"},
	{0x5C5898A53855C717lu, "sys/00003/ID00001"},
	{0xA3A31ED496552654lu, "sys/00003/ID00004"},
	{0xFBC67410149BAEADlu, "sys/00003/ID00005"},
	{0x3E45B9144874DB15lu, "sys/00003/ID00006"},
	{0x566C42C6C13850A4lu, "sys/00003/ID00007"},
	{0x7D4542E95151E2CElu, "sys/00003/ID00008"},
	{0x7A5387EB76D20BD2lu, "sys/00003/ID00009"},
	{0x94649C23D1B13005lu, "sys/00003/ID00010"},
	{0x1D3D015D72676CD4lu, "sys/00003/ID00011"},
	{0xCD1C8D7A3B21408Alu, "sys/00003/ID00012"},
	{0x502352030C7312AElu, "sys/00003/ID00013"},
	{0xF9CA655E4667695Flu, "sys/00003/ID00014"},
	{0x4AC38F8BEBCDB9BAlu, "sys/00003/ID00015"},
	{0x0A308B09A43DA8F7lu, "sys/00003/ID00016"},
	{0xDFB625011E4ABB2Clu, "sys/00003/ID00017"},
	{0xA25C0272847004AElu, "sys/00003/ID00018"},
	{0x0D8A63D1B8633294lu, "sys/00003/ID00019"},
	{0xF1F35D786FAB17C0lu, "sys/00003/ID00020"},
	{0xFE3E272D696B5EE0lu, "sys/00003/ID00021"},
	{0xA9AA07E443826F30lu, "sys/00004/ID00000"},
	{0x6AD66CE32FE322E5lu, "sys/00004/ID00007"},
	{0x85941BD294FF5E92lu, "sys/00004/ID00011"},
	{0xB6575620AFFBCC93lu, "sys/00004/ID00012"},
	{0xDE2534C41D87050Flu, "sys/00004/ID00013"},
	{0x016630E40C17B4B5lu, "sys/00004/ID00014"},
	{0xFC54EEB6CC820392lu, "sys/00004/ID00015"},
	{0xA393F187285DF32Clu, "sys/00004/ID00016"},
	{0x05324ED4D8BC0292lu, "sys/00004/ID00017"},
	{0x04377EFC8ABB86D7lu, "sys/00004/ID00018"},
	{0x6A5787EF25CC3130lu, "sys/00004/ID00019"},
	{0x2501A42747579603lu, "sys/00004/ID00020"},
	{0xCF80581BFF74A4EElu, "sys/00004/ID00021"},
	{0xC8272AB23B25FF21lu, "sys/00004/ID00022"},
	{0x52B6A01A97582F82lu, "sys/00004/ID00023"},
	{0xAFD08F23A949A0D7lu, "sys/00004/ID00024"},
	{0xF12F537929D9C0DBlu, "sys/00004/ID00025"},
	{0xB4D213ADF9F92FABlu, "sys/00004/ID00026"},
	{0x880C7CEF3E939171lu, "sys/00004/ID00027"},
	{0x36D6ADDD4F62DD25lu, "sys/00004/ID00028"},
	{0x70B7EE8BE3F3A676lu, "sys/00004/ID00029"},
	{0xFA4811F94C70FD74lu, "sys/00004/ID00030"},
	{0x48FD07040B79E483lu, "sys/00004/ID00031"},
	{0x218FE4C0A1B556C6lu, "sys/00004/ID00032"},
	{0xA7EE7561059F937Flu, "sys/00004/ID00033"},
	{0xE88001461A750248lu, "sys/00004/ID00034"},
	{0x265FCD057D7563D6lu, "sys/00004/ID00039"},
	{0x5F939EB87747D867lu, "sys/00004/ID00040"},
	{0x95C4646F1C08B13Blu, "sys/00004/ID00041"},
	{0xECE7B0A5E97FD13Blu, "sys/00004/ID00042"},
	{0x3B3B40E65746227Clu, "sys/00004/ID00043"},
	{0x10E01B7FB46EE89Clu, "sys/00004/ID00044"},
	{0xB8410A2D50C2239Blu, "sys/00004/ID00045"},
	{0xC92DE080CBD1D9D5lu, "sys/00004/ID00046"},
	{0x7C60825FC24E96AAlu, "sys/00005/ID00000"},
	{0xB849BFBF15E66997lu, "sys/00005/ID00001"},
	{0xA032AD74EB5F9427lu, "sys/00006/ID00002"},
	{0x806EED4D2C7DB727lu, "sys/00007/ID00000"},
	{0xAE88D686E8412FA9lu, "sys/00007/ID00001"},
	{0x8CEC0C1CA20C416Dlu, "sys/00007/ID00002"},
	{0x0B0E3A036834A6D8lu, "sys/00007/ID00003"},
	{0x86D2D9E2C3C2A340lu, "sys/00007/ID00004"},
	{0x727BD33C552C6E9Clu, "sys/00007/ID00005"},
	{0x70A8F0D3E3448A7Elu, "sys/00007/ID00006"},
	{0xFF18159534C8F8BFlu, "sys/00007/ID00007"},
	{0x672C93A5C5341F3Dlu, "sys/00007/ID00027"},
	{0x59A1579FD30FEFF6lu, "sys/00007/ID00028"},
	{0x946A32F40A7D413Clu, "sys/00007/ID00029"},
	{0xE35532475BCE9BAClu, "sys/00007/ID00030"},
};

static_assert(!has_duplicates(TEXTURE_HASHES, std::size(TEXTURE_HASHES)), "Detected repeated hash!");

const char* compareHashes(uint64_t hashToCompare) {
	for(size_t i = 0; i < std::size(TEXTURE_HASHES); i++)
		if (TEXTURE_HASHES[i].hash == hashToCompare) 
			return TEXTURE_HASHES[i].filepath;
	return nullptr;
}